// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetUUIDVersionParams creates a new GetUUIDVersionParams object
//
// There are no default values defined in the spec.
func NewGetUUIDVersionParams() GetUUIDVersionParams {

	return GetUUIDVersionParams{}
}

// GetUUIDVersionParams contains all the bound params for the get UUID version operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetUUIDVersion
type GetUUIDVersionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A name string for UUID V3

	  In: query
	*/
	Name *string
	/*Predefined UUID for a V3 UUID

	  In: query
	*/
	UUID *strfmt.UUID
	/*UUID version

	  Required: true
	  In: path
	*/
	Version string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetUUIDVersionParams() beforehand.
func (o *GetUUIDVersionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qUUID, qhkUUID, _ := qs.GetOK("uuid")
	if err := o.bindUUID(qUUID, qhkUUID, route.Formats); err != nil {
		res = append(res, err)
	}

	rVersion, rhkVersion, _ := route.Params.GetOK("version")
	if err := o.bindVersion(rVersion, rhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindName binds and validates parameter Name from query.
func (o *GetUUIDVersionParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	return nil
}

// bindUUID binds and validates parameter UUID from query.
func (o *GetUUIDVersionParams) bindUUID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("uuid", "query", "strfmt.UUID", raw)
	}
	o.UUID = (value.(*strfmt.UUID))

	if err := o.validateUUID(formats); err != nil {
		return err
	}

	return nil
}

// validateUUID carries on validations for parameter UUID
func (o *GetUUIDVersionParams) validateUUID(formats strfmt.Registry) error {

	if err := validate.FormatOf("uuid", "query", "uuid", o.UUID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindVersion binds and validates parameter Version from path.
func (o *GetUUIDVersionParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Version = raw

	if err := o.validateVersion(formats); err != nil {
		return err
	}

	return nil
}

// validateVersion carries on validations for parameter Version
func (o *GetUUIDVersionParams) validateVersion(formats strfmt.Registry) error {

	if err := validate.EnumCase("version", "path", o.Version, []interface{}{"v1", "v2", "v3", "v4", "v5"}, true); err != nil {
		return err
	}

	return nil
}
