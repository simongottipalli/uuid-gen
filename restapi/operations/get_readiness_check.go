// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetReadinessCheckHandlerFunc turns a function with the right signature into a get readiness check handler
type GetReadinessCheckHandlerFunc func(GetReadinessCheckParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReadinessCheckHandlerFunc) Handle(params GetReadinessCheckParams) middleware.Responder {
	return fn(params)
}

// GetReadinessCheckHandler interface for that can handle valid get readiness check params
type GetReadinessCheckHandler interface {
	Handle(GetReadinessCheckParams) middleware.Responder
}

// NewGetReadinessCheck creates a new http.Handler for the get readiness check operation
func NewGetReadinessCheck(ctx *middleware.Context, handler GetReadinessCheckHandler) *GetReadinessCheck {
	return &GetReadinessCheck{Context: ctx, Handler: handler}
}

/* GetReadinessCheck swagger:route GET /readiness_check getReadinessCheck

readiness check

readiness check

*/
type GetReadinessCheck struct {
	Context *middleware.Context
	Handler GetReadinessCheckHandler
}

func (o *GetReadinessCheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetReadinessCheckParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
